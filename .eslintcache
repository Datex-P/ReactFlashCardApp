[{"/Users/fab/Downloads/reactapp/flashcardreact/src/index.js":"1","/Users/fab/Downloads/reactapp/flashcardreact/src/App.js":"2","/Users/fab/Downloads/reactapp/flashcardreact/src/reportWebVitals.js":"3","/Users/fab/Downloads/reactapp/flashcardreact/src/imageChanger.jsx":"4","/Users/fab/Downloads/reactapp/flashcardreact/src/ImageChanger.jsx":"5","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/index.js":"6","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/App.js":"7","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/NavBar.js":"8","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/Stats/Stats.js":"9","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/LittleComponents/Icon.js":"10","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/deck/ThreeDotsBtn.js":"11","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/LittleComponents/useOutsideAlerter.js":"12","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/parent_child/Parent.js":"13","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/parent_child/Child.js":"14","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Context.js":"15","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/class/index.js":"16","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/Settings/Settings.js":"17","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Refvsdom.js":"18","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/LearnUseRef.js":"19","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/deck/DeleteCardQuestionBox.js":"20","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/Stats/TimeAndProgress.js":"21","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/Stats/HourlyBreakdown.js":"22","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/deck/CreateNewDeck.js":"23","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/deck/CutWord.js":"24","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/deck/CardBodyParts/SaveAndDiscard.js":"25","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/deck/CardBodyParts/RepeatBtn.js":"26","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/Stats/PieDiagramm.js":"27","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/deck/AddQuestionsToDeck.js":"28","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/deck/DeckOrCardname.js":"29","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/deck/QuestAnswerTrainOverv.js":"30","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/LandingPage.js":"31","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/MenuContainer.js":"32","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/deck/BasicOrangeWindow.js":"33","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/Settings/Hexagons.js":"34","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/Settings/RepetitionIntervalFields.js":"35","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/deck/DeckOrCardName.js":"36","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/deck/InputCheckbox.js":"37","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/deck/index.js":"38","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/Stats/PieDiagrammMain.js":"39"},{"size":511,"mtime":1608033487654,"results":"40","hashOfConfig":"41"},{"size":776,"mtime":1608039712942,"results":"42","hashOfConfig":"41"},{"size":362,"mtime":1608015684888,"results":"43","hashOfConfig":"41"},{"size":1070,"mtime":1608044007107,"results":"44","hashOfConfig":"41"},{"size":1070,"mtime":1608044007107,"results":"45","hashOfConfig":"41"},{"size":680,"mtime":1619794415401,"results":"46","hashOfConfig":"47"},{"size":812,"mtime":1619870997616,"results":"48","hashOfConfig":"47"},{"size":294,"mtime":1619855279139,"results":"49","hashOfConfig":"47"},{"size":5234,"mtime":1620229480886,"results":"50","hashOfConfig":"47"},{"size":816,"mtime":1619856834510,"results":"51","hashOfConfig":"47"},{"size":6630,"mtime":1619938126661,"results":"52","hashOfConfig":"47"},{"size":1167,"mtime":1613374262077,"results":"53","hashOfConfig":"47"},{"size":290,"mtime":1609859876733,"results":"54","hashOfConfig":"47"},{"size":181,"mtime":1609860000402,"results":"55","hashOfConfig":"47"},{"size":3996,"mtime":1620224503528,"results":"56","hashOfConfig":"47"},{"size":1707,"mtime":1610306068828,"results":"57","hashOfConfig":"47"},{"size":6106,"mtime":1619865496400,"results":"58","hashOfConfig":"47"},{"size":366,"mtime":1610617679230,"results":"59","hashOfConfig":"47"},{"size":535,"mtime":1610617895840,"results":"60","hashOfConfig":"47"},{"size":7046,"mtime":1620039043439,"results":"61","hashOfConfig":"47"},{"size":4001,"mtime":1620228974271,"results":"62","hashOfConfig":"47"},{"size":1412,"mtime":1620229798411,"results":"63","hashOfConfig":"47"},{"size":5112,"mtime":1620228664075,"results":"64","hashOfConfig":"47"},{"size":184,"mtime":1612525158894,"results":"65","hashOfConfig":"47"},{"size":1524,"mtime":1619937885211,"results":"66","hashOfConfig":"47"},{"size":484,"mtime":1619517800403,"results":"67","hashOfConfig":"47"},{"size":6698,"mtime":1620228525669,"results":"68","hashOfConfig":"47"},{"size":5652,"mtime":1620106773976,"results":"69","hashOfConfig":"47"},{"size":1377,"mtime":1613223098309,"results":"70","hashOfConfig":"47"},{"size":15919,"mtime":1620320771249,"results":"71","hashOfConfig":"47"},{"size":9420,"mtime":1620322447061,"results":"72","hashOfConfig":"47"},{"size":4966,"mtime":1619937987266,"results":"73","hashOfConfig":"47"},{"size":3177,"mtime":1620228559228,"results":"74","hashOfConfig":"47"},{"size":2370,"mtime":1614418986231,"results":"75","hashOfConfig":"47"},{"size":3094,"mtime":1620222495471,"results":"76","hashOfConfig":"47"},{"size":1729,"mtime":1620115207079,"results":"77","hashOfConfig":"47"},{"size":2137,"mtime":1620024467860,"results":"78","hashOfConfig":"47"},{"size":11016,"mtime":1620321698889,"results":"79","hashOfConfig":"47"},{"size":6244,"mtime":1620324970019,"results":"80","hashOfConfig":"47"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"s5fd1k",{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},"gggxqh",{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"93"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"93"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"93"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"93"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"93"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"93"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/fab/Downloads/reactapp/flashcardreact/src/index.js",[],"/Users/fab/Downloads/reactapp/flashcardreact/src/App.js",["166"],"/Users/fab/Downloads/reactapp/flashcardreact/src/reportWebVitals.js",[],"/Users/fab/Downloads/reactapp/flashcardreact/src/imageChanger.jsx",["167"],"/Users/fab/Downloads/reactapp/flashcardreact/src/ImageChanger.jsx",[],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/index.js",[],["168","169"],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/App.js",[],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/NavBar.js",[],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/Stats/Stats.js",[],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/LittleComponents/Icon.js",[],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/deck/ThreeDotsBtn.js",[],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/LittleComponents/useOutsideAlerter.js",[],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/parent_child/Parent.js",[],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/parent_child/Child.js",[],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Context.js",["170"],"import React, { useEffect, useState } from 'react'\n\nexport const Context = React.createContext(null)//step 1 createing context instance\n\nexport default function ContextProvider({ children }) {\n  const [showProgressDiagram, setShowProgressDiagram] = useState(true);\n  const [scrollbarVisible, setScrollbarVisible] = useState(true)\n\n\n  const [dataBase, setDataBase] = useState(null);\n  const [styles, setStyles] = useState({\n    backgroundColor: {\n      light: ' #86a873',\n      dark: '#5aaaff',\n      default: 'rgb(90, 170, 149)'\n    }\n  });\n\n  // \n  let colors = ['#ffcdb2', '#ffb4a2', '#e5989b', '#b5838d', '#6d6875'];\n\n  useEffect(() => {\n    let dB = {\n\n      DeckNames: [],\n      active:2,\n      queue: [],\n      checkboxClicked: false,\n      showDeleteFrame: true,\n      openedToday: false,\n      deckCompleted: 2,\n      timeValues: {\n        left: 2,\n        middle: 5,\n        right: 10\n      },\n      breakdownIntervals: [\n        {month: 1},\n        {month: 3},\n        {month: 12}\n      ],\n      userTimePreferences: [\n        {\n          name: 'again',\n          amount: 3,\n          unit: 'm'\n        },\n        {\n          name: 'good',\n          amount: 5,\n          unit: 'h'\n        },\n        {\n          name: 'easy',\n          amount: 10,\n          unit: 'd'\n        }\n      ],\n      userPreferences: {\n        days: 0,\n        backgroundColor: 'default',\n        weeksInRow: 0,\n        toReview: 0\n      },\n      hourlyBreakdown: '1 month',\n      studyTime: 0,\n      calendarReset: false,\n      weeklyTarget: 1,\n      daysOfStudy: {\n        day: 4\n      },\n      studied: [new Date()],\n\n      // let colors = ['#ffcdb2', '#ffb4a2', '#e5989b', '#b5838d', '#6d6875'];\n\n    };\n\n    for (let i = 100; i < 103; i++) {\n      let arr = [];\n\n      for (let i = 1; i < 5; i++) {\n        \n        if(i===3 || i ===2) {\n          arr.push({\n            question: `question${i}`,\n            answer: `answer${i}`,\n            paused: false\n          })\n        }else{\n          arr.push({\n            question: `question${i}`,\n            answer: `answer${i}`,\n            paused: true\n          })\n        }\n      };\n\n    \n\n      dB.DeckNames.push(\n        {\n          name:`Literature${i}`,\n          backgroundColor: colors[-100+i],\n          data: arr,\n          thisDeckCompleted: false, //shows whether the study goal of the particular deck is reached\n          color: colors[i%colors.length],\n          toStudyValue:0,\n          cardsToday: 0,\n          paused:false,\n          skipPausedCards: 0,\n          pauseMode:false,   //when active the pause switch can be clicked in question answers when cards are paused\n          editModeActive:false //when editModeActive is true, pause switch can t be clicked\n\n        }\n\n      );\n      dB.active++\n    }\n    console.log(colors, 'here colors und so')\n    console.log(dB.active)\n    setDataBase(dB)\n  }, []);\n  \n  return (\n\n    <Context.Provider value={{ dataBase, setDataBase, styles, setStyles,showProgressDiagram, setShowProgressDiagram, colors\n    ,scrollbarVisible, setScrollbarVisible }} >{/*step 2 declearing some value and creating provider*/}\n\n      {children}\n\n    </Context.Provider>\n\n  )\n\n  \n}\n\n// from the other project\n\n// queue: [],\n// showDiagram: true, //when clicked on the menu button or in questionAsnwerTrain it is set to false\n// userStylePreferences: [],\n// openedToday: false,\n// displayDeck: false, //when display deck is true the study goal of the deck is reached and thus it is not displayed anymore\n// deckCompleted: 0, //counter goes up when study goal for the day is reached and deck is finished, thus no need to display it anymore\n// showDeleteFrameQuestion: true,\n// showDeleteFrameStats: true,\n// // toStudyGoal: 20,\n// // toReviewGoal: 0,\n// timeValues: { left: 2, middle: 5, right: 10 },\n// nameValues: {leftName: 'again', middleName: 'good', rightName: 'easy'},\n// studyTime : 0,\n// calendarReset: false,\n// weeklyTarget: 1,\n// daysOfStudy : {day : 4},\n// overview: false,\n// studied: [new Date()],","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/class/index.js",[],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/Settings/Settings.js",["171"],"import React, { useState, useContext, useEffect} from 'react';\nimport { withRouter } from 'react-router-dom'\nimport { Context } from '../../Context'\nimport Hexagons from  './Hexagons'\nimport RepetitionIntervalFields from './RepetitionIntervalFields'\n\nimport BasicOrangeWindow from '../deck/BasicOrangeWindow'\nimport '../styles.css'\nimport edit from '../../icons/edit.svg'\nimport save from '../../icons/save.svg'\n\n\n\nfunction Settings({ history }) {\n  const [editIsPossible, setEditIsPossible] = useState(false)\n  const [saveOrEdit, setSaveOrEdit] = useState(false)\n  const [saveOrEditGoal, setSaveOrEditGoal] = useState(false)\n  const [editHex, setEditHex] = useState(true)\n  \n  const { dataBase, setDataBase,setShowProgressDiagram } = useContext(Context)\n  const [userTimePreferences, setUserTimePreferences] = useState({})\n\n  useEffect(() => {\n    setUserTimePreferences(dataBase?.userTimePreferences || {})\n  }, [dataBase?.userTimePreferences])\n\n    useEffect(()=>{\n      setShowProgressDiagram(false)\n    },[])\n\n  function setShow() {\n    history.push('/')\n    setShowProgressDiagram(true)\n  }\n\n  function handleColor(e) {\n    let newDataBase = { ...dataBase }\n    newDataBase.userPreferences[e.target.name] = e.target.value\n   // this.checked = true\n   //checked={true}\n    setDataBase(newDataBase)\n  }\n\n\n  function saveTimeNumberChanges() {\n    let newDataBase = { ...dataBase }\n    newDataBase.userTimePreferences = userTimePreferences\n    setDataBase(newDataBase)\n  }\n\n  return (\n\n    dataBase &&\n\n    <BasicOrangeWindow\n      show={true}\n      setShow={setShow}\n      title={\n\n        <div\n          style={{fontWeight: 'bold', fontSize: '22px'}}\n          contentClassName={'pos'}\n        >\n\n          Settings\n       </div>\n      } \n    >\n      <div style={{ fontWeight: 'bold', fontSize: '17px', textAlign: 'center', marginBottom: '8px' }}\n      >\n\n          Change Repetition Interval\n      </div>\n      <div className='d-flex justify-content-center'\n      >\n          <div \n              className='d-flex border border-dark justify-content-center align-items-center'\n              style={{ padding: '1px', borderRadius: '5px', position: 'relative', width: '284px', height:'88px' }}\n          >\n              <div \n                  className='d-flex justify-content-around align-items-center' \n                  style={{width: '280px'}}\n              >\n                  {\n                    dataBase &&\n                      \n                      dataBase.userTimePreferences.map((col, k) =>\n\n                      <RepetitionIntervalFields\n                          key={k} \n                          index={k} \n                          data={col} \n                          saveOrEdit={saveOrEdit}\n                          editIsPossible={editIsPossible} \n                          userTimePreferences={userTimePreferences} \n                          setUserTimePreferences={setUserTimePreferences} \n                      />\n                      )\n                  }\n                </div>\n              \n          </div>\n          <div \n              title='Click and change name buttons and repetition intervals for all decks.'\n              style={{ position: 'absolute', right: '11px', top: '77px', cursor: 'pointer' }}\n          >\n              <img\n                  src={saveOrEdit ? save : edit}\n                  alt={saveOrEdit ? 'save' : 'edit'}\n                  className= 'nonDraggableIcon'\n                  style={{ outline: 'none' }}\n                  onClick={() => {\n                          setEditIsPossible(!editIsPossible)\n                          setSaveOrEdit(!saveOrEdit)\n                          saveTimeNumberChanges()\n                        }}\n              />\n          </div>\n      </div>\n\n      <div \n          className='goalSettingsContainer'\n      >\n          Goal Settings\n      </div>\n\n      <div style={{ fontWeight: 'bold', fontSize: '13px', textAlign: 'center', marginBottom: '2px' }}\n      >\n          Current Weekly Target\n      </div>\n\n      <div \n        className='d-flex border border-dark justify-content-between align-items-center hexagonContainer'\n      >\n        {\n\n          Array(7).fill('').map((el, idx) =>\n\n            <Hexagons \n                idx={idx} \n                editHex={editHex} \n                setEditHex={setEditHex} \n                saveOrEditGoal={saveOrEditGoal} \n            />\n          )\n        }\n      </div>\n      <div style={{ position: 'absolute', top: '232px', right: '50px', cursor: 'pointer' }}\n      >\n        <img\n          src={editHex ? edit : save}\n          alt={saveOrEditGoal ? 'edit' : 'save'}\n          style={{ outline: 'none' }}\n          className= 'nonDraggableIcon'\n          \n          onClick={() => {\n            setSaveOrEditGoal(!saveOrEditGoal)\n            setEditHex(!editHex)\n          }}\n        />\n      </div>\n      <div className='weeklyTarget'\n      >\n\n        Target met: {dataBase.userPreferences.weeksInRow} weeks in a row\n\n      </div>\n      <div style={{ fontWeight: 'bold', textAlign: 'center', marginTop: '20px', marginBottom: '2px' }}\n      >\n          Colorscheme\n      </div>\n\n      <div \n          className='d-flex border border-dark justify-content-between align-items-center'\n          style={{borderRadius: '5px', padding: '5px', width: '215px', marginTop: '10px', margin: 'auto'}}\n      >\n\n        {\n          ['light', 'dark', 'default'].map(comp =>\n            <>\n              <input \n                style={{ cursor: 'pointer' }}\n                name='backgroundColor'\n                type='radio'\n                // title = `Change background color of main menu to ${comp}.`\n                value={comp}\n                //checked={false}\n                checked ={dataBase.userPreferences?.backgroundColor === comp}  //how to combine checked and handleColor accurately?\n                onChange={handleColor}\n              />\n              <label className='mb-0'>\n                  {comp}\n              </label>\n            </>\n          )\n        }\n      </div>\n\n    </BasicOrangeWindow>\n  )\n}\n\nexport default withRouter(Settings)\n\n\n\n\n\n\n\n\n\n\n\n\n\n","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Refvsdom.js",["172","173"],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/LearnUseRef.js",[],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/deck/DeleteCardQuestionBox.js",[],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/Stats/TimeAndProgress.js",[],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/Stats/HourlyBreakdown.js",[],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/deck/CreateNewDeck.js",["174"],"import React, { useContext, useState, useRef, useEffect } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport { Context } from \"../../Context\"; //step 4.1 import context instance\n\nimport redCross from \"../../icons/redCross.svg\";\n\nexport default function CreateNewDeck({\n  addNewDeckWindow,\n  setDecksAreVisible,\n  close,\n  setActive,\n  setArrowDown,\n}) {\n  const {\n    dataBase,\n    setDataBase,\n    setShowProgressDiagram,\n    setScrollbarVisible,\n    colors\n  } = useContext(Context);\n  const [inputField, setInputField] = useState(\"\");\n\n  const inputRef = useRef(null);\n\n  useEffect(() => {\n    if (addNewDeckWindow) {\n      inputRef.current.focus();\n      setShowProgressDiagram(false);\n    } else {\n    //  setShowProgressDiagram(true);\n    }\n\n  }, [addNewDeckWindow]);\n\n\n\n  function addNewDeckName() {\n    // if(dataBase.DeckNames.length ===0) {\n    //   setScrollbarVisible(false)\n    // }\n\n    let newDataBase = { ...dataBase };\n\n    if (newDataBase.DeckNames.find((deck) => deck.name === inputField)) {\n      alert(\"Name of Deck already exists\");\n      setInputField(\"\");\n    } else if (!inputField) {\n      alert(\"Input needed\");\n    } else if (document.getElementById(\"inputField\").value.length > 25) {\n      alert(\"Deckname is too lo\");\n      setInputField(\"\");\n      document.getElementById(\"inputField\").focus();\n    } else if (document.getElementById(\"inputField\").value.length < 3) {\n      alert(\"Deckname is too short\");\n      setInputField(\"\");\n      document.getElementById(\"inputField\").focus();\n    } else {\n      console.log(\"it works\");\n      let index = newDataBase.DeckNames.push({\n        name: inputField,\n        data: [],\n        cardsToday: 0,\n        color: colors[Object.keys(dataBase.DeckNames).length % colors.length],\n        paused: false,\n        thisDeckCompleted: false, //shows whether the study goal of the particular deck is reached\n        skipPausedCards: 0,\n        pauseMode: false, //when active the pause switch can be clicked in question answers when cards are paused\n        editModeActive: false, //when editModeActive is true, pause switch can t be clicked\n        // color: colors[(dataBase.DeckNames.length) % colors.length]\n      });\n\n      // console.log(dataBase.DeckNames.length, \"here databse length\");\n      if (dataBase.DeckNames.length === 1 || dataBase.DeckNames.length === 0) {\n        // setTimeout(()=>setScrollbarVisible(false),10);\n        setScrollbarVisible(false)\n      } else {\n        setScrollbarVisible(true)\n      }\n      setActive(index - 1);\n      setInputField(\"\");\n      setDataBase(newDataBase);\n      // console.log(scrollbarVisible, \"scrollbar visible\");\n      close();\n    }\n  }\n\n  return (\n    <Modal\n      show={addNewDeckWindow}\n      backdrop=\"static\"\n      keyboard={false}\n      id=\"createDeck\"\n      centered\n    >\n      <Modal.Header>\n        <Modal.Title>Name for new deck</Modal.Title>\n\n        <button\n          className=\"redCross\"\n          onClick={() => {\n            if (dataBase.DeckNames.length === 0) {\n              //when no deck in list, show arrow Down again\n              setArrowDown(true);\n              setDecksAreVisible(false);\n              setScrollbarVisible(false);\n            } else {\n\n              addNewDeckWindow(false);\n              setDecksAreVisible(true);\n            }\n            close();\n          }}\n        >\n          <img\n            className=\"nonDraggableIcon\"\n            src={redCross}\n            alt=\"redCross\"\n            style={{\n              position: \"relative\",\n              top: \"0px\",\n              right: \"-9px\",\n              width: \"15px\",\n            }}\n          />\n        </button>\n      </Modal.Header>\n\n      <Modal.Body className=\"d-flex flex-column align-items-center\">\n        <input\n          id=\"inputField\"\n          className=\"createNewDeckInputField\"\n          minLength=\"3\"\n          maxLength=\"25\"\n          ref={inputRef}\n          value={inputField}\n          onChange={(event) => setInputField(event.target.value)}\n        />\n\n        <select className=\"selectStyling\">\n          <option>option 1</option>\n          <option>option 2</option>\n          <option>option 3</option>\n          <option>option 4</option>\n          <option>option 5</option>\n        </select>\n      </Modal.Body>\n\n      <div className=\"d-flex justify-content-between cancelOkContainer\">\n        {[\"Cancel\", \"Ok\"].map((el) => (\n          <button\n            className=\"generalButtonStyling okCancelButtonStyling\"\n            key={el}\n            onClick={() => {\n              el === \"Cancel\"\n                ? (() => {\n                    close();\n                    setInputField(\"\");\n\n                    if (dataBase.DeckNames.length === 0) {\n                      //when no deck in list, show arrow Down again\n                      setArrowDown(true);\n                      setDecksAreVisible(false);\n                      console.log(\"yippi yeah yeah yeah\");\n                    }\n                  })()\n                : addNewDeckName();\n            }}\n          >\n            {el}\n          </button>\n        ))}\n      </div>\n    </Modal>\n  );\n}\n","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/deck/CutWord.js",[],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/deck/CardBodyParts/SaveAndDiscard.js",[],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/deck/CardBodyParts/RepeatBtn.js",[],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/Stats/PieDiagramm.js",["175","176"],"import React, {useEffect, useRef, useContext} from 'react'\nimport Chart from \"chart.js\";\nimport {Context} from '../../Context'\n\nexport default function ChartComp() {\n\n  const { dataBase} = useContext(Context);\n  let ctx = useRef(null)\n  // let todayDate = new Date();\n\n // console.log(dataBase.openedToday, 'openedToday')\n\n let todayDate = new Date();\n\n\n var config = {\n  type: 'doughnut',\n  data: {\n    labels: [\n      // \"Red\",\n      // \"Green\",\n      // \"Yellow\"\n    ],\n    datasets: [{\n      data: [\n        //  300, 50, 100\n      ],\n      backgroundColor: [\n        //  \"#FF6384\",\n        // \"#36A2EB\",\n        // \"#FFCE56\"\n      ],\n      borderColor: [\n        //  'rgba(184, 156, 110, 0.95)',\n        // 'rgba(184, 156, 110, 0.95)',\n        // 'rgba(184, 156, 110, 0.95)'\n      ],\n       borderWidth: 0,\n      hoverBackgroundColor: [\n      //  \"#FF6384\",\n        // \"#36A2EB\",\n        // \"#FFCE56\"\n      ]\n    }]\n  },\n  options: {\n    elements: {\n    center:{\n     // display: true,\n      text: \n      !dataBase.openedToday ? 'No cards studied today'\n            //<div style='font-size:12px'>No data</div> \n            :\n            `Data from ${todayDate.toLocaleString('de-DE', {\n              day: 'numeric',\n              month: 'numeric',\n              year: 'numeric',\n            })}`,\n      color: 'black',\n      fontStyle: 'Arial', // Default is Arial\n      sidePadding: 2, // Default is 20 (as a percentage)\n      minFontSize: 16, // Default is 20 (in px), set to false and text will not wrap.\n      lineHeight: 19,\n    \n     \n    }\n  },\n    legend: {\n      position: 'bottom',\n      labels: {\n        fontColor: 'black'\n      }\n\n    },\n    cutoutPercentage: 81,\n    maintainAspectRatio: false,\n    layout: {\n      padding: {\n        top: 10\n      },\n      border: 'none'\n    }\n  }\n};\n\n\n\n\n\n\n\n\n\n  useEffect(() => {\n\n\n\n    new Chart(ctx.current, config);\n\n  }, [])\n\n  //newStuff just added\n  let date = new Date().toDateString()\n\n  for (let deck in dataBase.DeckNames) {\n\n    let deckItem = dataBase.DeckNames[deck]\n    if (deckItem.data.find((item) => new Date(item?.openHistory?.[0]).toDateString() === new Date().toDateString())) {\n      // todayCardsStudiedCounter++\n      console.log('yes a deck was opened today')\n      config.data.labels.push(deckItem.name)\n    }\n    if (deckItem.data.find((item) => new Date(item?.openHistory?.[0]).toDateString())) {\n\n\n    //  cardsStudiedCounter += deckItem.data.filter((item) => item?.openHistory?.some(item => new Date(item).toDateString() == date)).length\n\n\n    console.log(deckItem.data.filter((item) => item?.openHistory?.some(item => new Date(item).toDateString())).length, 'opened cards today')\n\n    console.log(date, 'date und so')\n    // console.log(date.getDay, 'tag und so')\n    // console.log(date.toDateString(), 'date datesting und so')\n    // config.data.labels.push(deckItem.name)\n      //arr.push(deckItem.name)\n      \n      //config.data.datasets[0].data.push(10)\n      config.data.datasets[0].data.push(deckItem.data.filter((item) => item?.openHistory?.some(item => new Date(item).toDateString() === date)).length)\n      //config.data.datasets[0].backgroundColor.push('yellow')\n       config.data.datasets[0].backgroundColor.push(deckItem.color)\n      config.data.datasets[0].borderColor.push(deckItem.color)\n      config.data.datasets[0].hoverBackgroundColor.push(deckItem.color)\n    }\n  }\n\n  //newStufff just added\n\n\n  Chart.pluginService.register({\n    beforeDraw: function(chart) {\n      if (chart.config.options.elements.center) {\n        // Get ctx from string\n        var ctx = chart.chart.ctx;\n\n        // Get options from the center object in options\n        var centerConfig = chart.config.options.elements.center;\n        var fontStyle = centerConfig.fontStyle || \"Arial\";\n        var txt = centerConfig.text;\n        var color = centerConfig.color || \"#000\";\n        var maxFontSize = centerConfig.maxFontSize || 75;\n        var sidePadding = centerConfig.sidePadding || 20;\n        var sidePaddingCalculated =\n          (sidePadding / 100) * (chart.innerRadius * 2);\n        // Start with a base font of 30px\n        ctx.font = \"30px \" + fontStyle;\n\n        // Get the width of the string and also the width of the element minus 10 to give it 5px side padding\n        var stringWidth = ctx.measureText(txt).width;\n        var elementWidth = chart.innerRadius * 2 - sidePaddingCalculated;\n\n        // Find out how much the font can grow in width.\n        var widthRatio = elementWidth / stringWidth;\n        var newFontSize = Math.floor(30 * widthRatio);\n        var elementHeight = chart.innerRadius * 2;\n\n        // Pick a new font size so it will not be larger than the height of label.\n        var fontSizeToUse = Math.min(\n          newFontSize,\n          elementHeight,\n          maxFontSize\n        );\n        var minFontSize = centerConfig.minFontSize;\n        var lineHeight = centerConfig.lineHeight || 25;\n        var wrapText = false;\n\n        if (minFontSize === undefined) {\n          minFontSize = 20;\n        }\n\n        if (minFontSize && fontSizeToUse < minFontSize) {\n          fontSizeToUse = minFontSize;\n          wrapText = true;\n        }\n\n        // Set font settings to draw it correctly.\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        var centerX = (chart.chartArea.left + chart.chartArea.right) / 2;\n        var centerY = (chart.chartArea.top + chart.chartArea.bottom) / 2;\n        ctx.font = fontSizeToUse + \"px \" + fontStyle;\n        ctx.fillStyle = color;\n\n        if (!wrapText) {\n          ctx.fillText(txt, centerX, centerY);\n          return;\n        }\n\n        var words = txt.split(\" \");\n        var line = \"\";\n        var lines = [];\n\n        // Break words up into multiple lines if necessary\n        for (var n = 0; n < words.length; n++) {\n          var testLine = line + words[n] + \" \";\n          var metrics = ctx.measureText(testLine);\n          var testWidth = metrics.width;\n          if (testWidth > elementWidth && n > 0) {\n            lines.push(line);\n            line = words[n] + \" \";\n          } else {\n            line = testLine;\n          }\n        }\n\n        // Move the center up depending on line height and number of lines\n        centerY -= (lines.length / 2) * lineHeight;\n\n        for (var n = 0; n < lines.length; n++) {\n          ctx.fillText(lines[n], centerX, centerY);\n          centerY += lineHeight;\n        }\n        //Draw text in center\n        ctx.fillText(line, centerX, centerY);\n      }\n    },\n  });\n\n\n\n\n  return (\n    <canvas \n        ref={ctx} \n        className='pieChart'\n        style={{ width: '270px', height: '200px', overflow: 'hidden', borderRadius: '5px' }} \n    >\n\n    </canvas>\n\n  )\n}\n\n","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/deck/AddQuestionsToDeck.js",[],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/deck/DeckOrCardname.js",[],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/deck/QuestAnswerTrainOverv.js",[],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/LandingPage.js",["177"],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/MenuContainer.js",["178"],"import React, { useState, useContext } from 'react';\nimport { Modal } from 'react-bootstrap'\nimport { Context } from '../Context'\nimport './styles.css';\n\nimport Icon from '../LittleComponents/Icon'\n\nimport settingsIcon from '../icons/settings.svg';\nimport statsIcon from '../icons/stats.svg';\nimport logoutIcon from '../icons/logout.svg';\n\n\nexport default function MenuContainer({\n    editButtonClicked, //set to false when editButton is not clicked gets activated when editButton is clicked\n\n\n} \n    ) {\n\n  const [show, setShow] = useState(false); //opens the Menu when set to true\n\n  const { dataBase, setDataBase, styles,showProgressDiagram, setShowProgressDiagram } = useContext(Context)\n  const handleClose = () => setShow(false); // closes the Menu when handleclos is triggered\n\n  function triggerDiagramAndState () {\n    setShow(!show)\n    setShowProgressDiagram(!showProgressDiagram)\n  }\n\n  return (\n    <div \n        className='mx-auto'\n        style={{\n                backgroundColor: dataBase && styles.backgroundColor[dataBase.userPreferences.backgroundColor],\n                zIndex: '100', borderTopLeftRadius: '10px', borderTopRightRadius: '10px', width: '440px'\n                }}\n    >\n        <div className='menu flexColumnAlignCenter p-3'\n             style= {{cursor: !editButtonClicked? 'default': 'pointer'}} //cursor is default when edit input field is activated\n        >\n            <div style={{fontSize: '18px'}}>\n                    Menu\n            </div>\n            <div \n                className='menuContainer flexColumnAlignCenter' \n                onClick={() => \n                 !editButtonClicked?\n                    null\n                    :\n                    triggerDiagramAndState()\n                }\n            >\n                <div \n                    className={'menuIcon ' + (show ? 'transPlus' : ' ')} \n                    style={{ top: show ? '8px' : '0px' }}\n                >\n                </div>\n                \n                {\n                  !show && \n\n                      <div className={'menuIcon'} style={{ top: '8px' }}\n                      >                \n\n                      </div>\n                }\n\n                <div \n                    className={'menuIcon ' + (show ? 'transMinus' : ' ')} \n                    style={{top: show ? '8px' : '16px' }}\n                >  \n\n                </div>\n            </div>\n        </div>\n\n        {\n          show && editButtonClicked?\n\n          <>\n              <Modal \n                  show={show} \n                  onHide={handleClose} \n                  contentClassName={'modNew'} \n                  dialogClassName='align-items-start  pl-3' \n                  centered\n              >\n                  <Modal.Body \n                      className='p-0' \n                      style={{position: 'relative', top: '42px', left: '10px'\n                              }}\n                  >\n                      <div \n                          className='menuStyling nonDraggableIcon' \n                          onClick={()=>{setShow(false)\n                           }}\n                      >\n                          <Icons \n                               icons={[\n                                      { \n                                      src: statsIcon, \n                                      alt: 'statsIcon', \n                                      href: 'stats', \n                                      style: {  width: 'calc(100% / 3)',  padding: '3px', paddingLeft: '15px' \n                                             } \n                                        \n                                      },\n                                      {\n                                        src: settingsIcon, \n                                        alt: 'settingsIcon', \n                                        href: 'settings', \n                                        style: {  width: 'calc(100% / 3)', padding: '3px', \n                                        borderLeft: '2px solid black', \n                                        borderRight: '2px solid black', paddingLeft: '15px' \n                                                } \n                                        },\n                                      { \n                                        src: logoutIcon, \n                                        alt: 'logoutIcon', \n                                        href: 'logout', \n                                        style: { width: 'calc(100% / 3)', padding: '3px', paddingLeft: '15px'\n                                                } \n                                      }\n                                    ]}\n                          />\n                      </div>\n                  </Modal.Body>\n              </Modal>\n          </>\n          :\n          null\n        }\n    </div>\n  )\n}\n\nfunction Icons({ icons }) {\n  return (\n      icons.map((icon, key) => <Icon key={key} {...icon} />)\n  )\n}","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/deck/BasicOrangeWindow.js",[],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/Settings/Hexagons.js",[],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/Settings/RepetitionIntervalFields.js",[],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/deck/DeckOrCardName.js",[],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/deck/InputCheckbox.js",["179"],"import React, { useState, useContext } from 'react';\nimport { Context } from '../../Context'\n\nexport default function InputCheckbox({ index, setShowAnswerBtn, generateRandom }) {\n  // let [clicked, setClicked] = useState(false)\n  const { dataBase, setDataBase } = useContext(Context)\n  let newDataBase = {...dataBase}\n\n\n  function cardsPaused() {\n    console.log('function cardsPaused was fired')\n\n    return dataBase.DeckNames[index].data.filter(x => x.paused === true).length || 0\n  }\n\n  function handleChecked (e) {\n    if(dataBase.DeckNames[index].editModeActive) {\n    document.getElementById('myonoffswitch').checked = false\n    }\n  }\n\n\n  return (\n\n\n    <div\n    >\n      <input type=\"checkbox\" name=\"onoffswitch\"\n        className=\"onoffswitch-checkbox myonoffswitch\"\n        id=\"myonoffswitch\"\n        tabIndex=\"0\"\n        // {cardsPausedAndClicked? defaultChecked={true} : defaultChecked={false} }\n        // defaultChecked: cardsPausedAndClicked? {true}: {false}\n        //  checked={false}\n        onChange={handleChecked}\n        value='10'\n      />\n\n\n      <label className=\"onoffswitch-label\" htmlFor=\"myonoffswitch\"\n       onClick={() => {\n\n          if(!dataBase.DeckNames[index].editModeActive) {\n\n          if (dataBase.DeckNames[index].data.filter(x => x.paused === true).length === 0) {\n            console.log('no cards paused')\n          } else {\n          \n              if(dataBase.DeckNames[index].pauseMode) {\n              dataBase.DeckNames[index].pauseMode=false\n              setDataBase(newDataBase)\n              setShowAnswerBtn(true)\n        \n            }  else {\n              dataBase.DeckNames[index].pauseMode=true\n              setDataBase(newDataBase)\n              setShowAnswerBtn(false)\n              generateRandom()\n          }\n         \n        }\n           // console.log(dataBase.DeckNames[index].pauseMode, 'pasuemode')\n      }\n       }\n       }\n      \n      >\n        <span className=\"onoffswitch-inner\"></span>\n        <span className=\"onoffswitch-switch d-flex justify-content-center align-items-center\">\n          {`${cardsPaused()}`}\n        </span>\n      </label>\n\n    </div>\n\n  )\n}","/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/deck/index.js",[],"/Users/fab/Downloads/RoutingTest/newStuff/ReactFlashCardApp/src/Deck/Stats/PieDiagrammMain.js",["180","181"],{"ruleId":"182","severity":1,"message":"183","line":1,"column":8,"nodeType":"184","messageId":"185","endLine":1,"endColumn":12},{"ruleId":"182","severity":1,"message":"186","line":2,"column":8,"nodeType":"184","messageId":"185","endLine":2,"endColumn":16},{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","replacedBy":"190"},{"ruleId":"191","severity":1,"message":"192","line":122,"column":6,"nodeType":"193","endLine":122,"endColumn":8,"suggestions":"194"},{"ruleId":"191","severity":1,"message":"195","line":29,"column":7,"nodeType":"193","endLine":29,"endColumn":9,"suggestions":"196"},{"ruleId":"182","severity":1,"message":"197","line":1,"column":16,"nodeType":"184","messageId":"185","endLine":1,"endColumn":24},{"ruleId":"191","severity":1,"message":"198","line":13,"column":5,"nodeType":"193","endLine":13,"endColumn":7,"suggestions":"199"},{"ruleId":"191","severity":1,"message":"195","line":33,"column":6,"nodeType":"193","endLine":33,"endColumn":24,"suggestions":"200"},{"ruleId":"191","severity":1,"message":"201","line":100,"column":6,"nodeType":"193","endLine":100,"endColumn":8,"suggestions":"202"},{"ruleId":"203","severity":1,"message":"204","line":218,"column":18,"nodeType":"184","messageId":"205","endLine":218,"endColumn":19},{"ruleId":"206","severity":1,"message":"207","line":90,"column":29,"nodeType":"208","messageId":"209","endLine":90,"endColumn":31},{"ruleId":"182","severity":1,"message":"210","line":22,"column":21,"nodeType":"184","messageId":"185","endLine":22,"endColumn":32},{"ruleId":"182","severity":1,"message":"197","line":1,"column":17,"nodeType":"184","messageId":"185","endLine":1,"endColumn":25},{"ruleId":"191","severity":1,"message":"201","line":93,"column":6,"nodeType":"193","endLine":93,"endColumn":8,"suggestions":"211"},{"ruleId":"203","severity":1,"message":"204","line":180,"column":20,"nodeType":"184","messageId":"205","endLine":180,"endColumn":21},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","no-native-reassign",["212"],"no-negated-in-lhs",["213"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'colors'. Either include it or remove the dependency array.","ArrayExpression",["214"],"React Hook useEffect has a missing dependency: 'setShowProgressDiagram'. Either include it or remove the dependency array.",["215"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'inputDom.value'. Either include it or remove the dependency array.",["216"],["217"],"React Hook useEffect has a missing dependency: 'config'. Either include it or remove the dependency array.",["218"],"no-redeclare","'n' is already defined.","redeclared","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setDataBase' is assigned a value but never used.",["219"],"no-global-assign","no-unsafe-negation",{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"228","fix":"230"},"Update the dependencies array to be: [colors]",{"range":"231","text":"232"},"Update the dependencies array to be: [setShowProgressDiagram]",{"range":"233","text":"234"},"Update the dependencies array to be: [inputDom.value]",{"range":"235","text":"236"},"Update the dependencies array to be: [addNewDeckWindow, setShowProgressDiagram]",{"range":"237","text":"238"},"Update the dependencies array to be: [config]",{"range":"239","text":"240"},{"range":"241","text":"240"},[2865,2867],"[colors]",[1010,1012],"[setShowProgressDiagram]",[265,267],"[inputDom.value]",[764,782],"[addNewDeckWindow, setShowProgressDiagram]",[1877,1879],"[config]",[2062,2064]]